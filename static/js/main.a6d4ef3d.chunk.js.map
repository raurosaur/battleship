{"version":3,"sources":["Components/GameBoard.tsx","Logic/Game.ts","Components/SelectBoard.tsx","App.tsx","index.tsx"],"names":["GameBoard","name","clickable","clickHandler","dispBoard","Array","x","y","i","className","id","toLowerCase","onClick","e","ShipObject","length","Board","size","board","BoardArray","boardSize","this","innerArray","j","push","hasShip","wasHit","isVert","len","pointer","checkAvailability","every","loc","el","str","forEach","val","map","console","log","toString","SelectBoard","update","success","didValidDrop","NUM_GRIDS","Squares","useState","isHorizontal","setIsHorizontal","counter","setCounter","onDragOver","dragDefault","onDragEnter","onDrop","onDragLeave","player","setPlayer","preventDefault","stopPropagation","dragStart","dataTransfer","setData","currentTarget","style","backgroundColor","names","selected","getName","filter","split","newPlayer","insertShipHorizontal","insertShipVertical","document","getElementById","background","dragEnd","display","ships","from","querySelectorAll","getElementsByClassName","flexDirection","computedStyle","window","getComputedStyle","height","width","onDragStart","onDragEnd","draggable","getRandomIndex","Math","round","random","NUM_BOARD","App","state","choose","computer","hasWon","winner","undefined","updatePlayerBoard","setState","generateRandomGame","orientation","indx","ship","hit","didHit","color","circle","createElement","classList","add","appendChild","computerPlay","querySelector","remove","newBoard","isGameOver","handlePlay","setTimeout","render","playerBoard","square","React","Component","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.a6d4ef3d.chunk.js","sourcesContent":["/* eslint-disable no-loop-func */\nimport React, { FC } from \"react\";\n\nexport interface GBProps {\n  name: string;\n  clickable: boolean;\n  clickHandler?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => any;\n}\n\nconst BLOCK_LENGTH = 10;\n\nexport const GameBoard: FC<GBProps> = ({ name, clickable, clickHandler}) => {\n  const dispBoard = Array(BLOCK_LENGTH ** 2);\n  let x = 0,\n    y = 0;\n  for (let i = 0; i < BLOCK_LENGTH ** 2; ++i) {\n    dispBoard[i] = (\n      <div\n        className=\"squares flex-center\"\n        id={`${name.toLowerCase()}-${x}-${y}`} //Set Coordinates as ID\n        key={`${name.toLowerCase()}-${x}-${y}`}\n        onClick={(e) => {\n          if (!clickable) return;\n          if (clickHandler) clickHandler(e);\n        }}\n      ></div>\n    );\n    y = (y + 1) % BLOCK_LENGTH;\n    if (y === 0) x++;\n  }\n  return (\n    <div className=\"GameBoard flex-center\">\n      <h2\n        className={`${name.toLowerCase()} ${name === \"Player\" ? \"green\" : \"\"}`}\n      >\n        {name}\n      </h2>\n      <div className=\"grids\">{dispBoard}</div>\n    </div>\n  );\n};\n","//Ship Object Interface\ninterface ShipObjectInterface{\n    name:string | undefined;\n    length:number | undefined;\n}\n\n//Board Interface\ninterface BoardInterface {\n  insertShipVertical(name: string, x: number, y: number, length: number): void;\n  insertShipHorizontal(name: string,x: number, y: number, length: number): void;\n  hit(x: number, y: number): boolean;\n  isGameOver(): boolean;\n}\n\n//Ship Object Factory Function\nexport const ShipObject = function(name: string, length: number) :ShipObjectInterface{\n    return ({name, length});\n};\n\nexport type boardElement = {\n  name: string;\n  hasShip: boolean | undefined;\n  wasHit: boolean | undefined;\n};\n\nfunction getNewBoardElement():boardElement{\n  return {name: '', hasShip: false, wasHit: false};\n}\n\n//Board Class\nexport class Board implements BoardInterface {\n  //Array of BoardArray Type which stores whether a ship is there or not\n  readonly BoardArray: boardElement[][];\n  //Length of Array\n  readonly boardSize: number;\n\n  constructor(size: number, board?: Board) {\n    if(!!board){\n      this.BoardArray = new Array<Array<boardElement>>(size);\n      for(let i = 0; i < size; ++i)\n        this.BoardArray[i] = [...board.BoardArray[i]];\n    }\n    else{\n      this.BoardArray = [];\n      for (let i = 0; i < size; ++i) {\n        const innerArray : boardElement[] = [];\n        for (let j = 0; j < size; ++j){\n          innerArray.push(getNewBoardElement());\n        }\n        this.BoardArray.push(innerArray);\n      }\n    }\n    this.boardSize = size;\n  }\n\n  //Check Availability\n  private checkAvailability(isVert : boolean, x: number, y: number, len: number ) : boolean{\n    let i = x, j = y;  \n    for (let pointer = 0; pointer < len; pointer++) {\n        if(this.BoardArray[i][j].hasShip) return false\n        if(isVert)j = (j + 1) % this.boardSize;\n        else i = (i + 1) % this.boardSize;\n    }\n    return true;\n  }\n  \n  //Inserts Ship Horizontally\n  insertShipHorizontal(name: string, x: number, y: number, length: number): boolean {\n    if(!this.checkAvailability(false, x,y,length)) return false;\n    let j = y;\n    for (let pointer = 0; pointer < length; pointer++) {\n      this.BoardArray[x][j].name = name;\n      this.BoardArray[x][j].hasShip = true;\n      j = (j + 1) % this.boardSize;\n    }\n    return true;\n  }\n\n  //Inserts Ship Vertically\n  insertShipVertical(name: string, x: number, y: number, length: number): boolean {\n    if(!this.checkAvailability(true, x,y,length)) return false;\n      let i = x;\n      for (let pointer = 0; pointer < length; pointer++) {\n        this.BoardArray[i][y].name = name;\n        this.BoardArray[i][y].hasShip = true;\n        i = (i + 1) % this.boardSize;\n      }\n      return true;\n  }\n\n  //Hits a specific square and return true if square had a ship\n  hit(x: number, y: number): boolean {\n    this.BoardArray[x][y].wasHit = true;\n    return !!this.BoardArray[x][y].hasShip;\n  }\n\n  //Checks Whether game was over\n  isGameOver(): boolean {\n    return this.BoardArray.every((loc) => loc.every((el) => (el.hasShip) ? el.wasHit : true));\n  }\n\n  //toString()\n  toString(): string {\n    let str = '';\n    this.BoardArray.forEach(val => {\n        str += val.map(el => el.hasShip ? '\\x1b[32mtrue   ' : '\\x1b[37mfalse  ') + '\\n';\n    });\n    return str;\n  }\n\n  //print\n  print():void{\n    console.log(this.toString());\n  }\n}\n\n//Ships\nexport const ships = [\n    ShipObject('Carrier', 5),\n    ShipObject('Battleship', 4),\n    ShipObject('Destroyer', 3),\n    ShipObject('Submarine', 3),\n    ShipObject('Patrol Boat', 2)\n];\n","import React, { useState } from \"react\";\nimport { Board } from \"../Logic/Game\";\n\nconst SelectBoard: React.FC<{update: (player :Board) => void}> = ({update}) => {\n  //Coordinate Locations for Grid on Screen\n  let x = 0,\n    y = 0;\n  //Success in placing Ship\n  let success = false, didValidDrop = false;\n  //Total Number of Grids => Can be Changed\n  const NUM_GRIDS = 10;\n  //Squares for Screen : JSX Elements\n  const Squares = Array(NUM_GRIDS ** 2);\n  //Orientation of Ships\n  let [isHorizontal, setIsHorizontal] = useState(true);\n  //Counter\n  const [counter, setCounter] = useState(0);\n  //Loop to set values of Squares\n  for (let i = 0; i < NUM_GRIDS ** 2; ++i) {\n    Squares[i] = (\n      <div\n        className=\"squares flex-center\"\n        id={`${x}-${y}`} //Set Coordinates as ID\n        key = {`${x}-${y}`}\n        onDragOver={dragDefault}\n        onDragEnter={dragDefault}\n        onDrop={onDrop}\n        onDragLeave={dragDefault}\n      ></div>\n    );\n    y = (y + 1) % NUM_GRIDS;\n    if (y === 0) x++;\n  }\n  //Size Value of Ship Selected\n  let size = 0;\n\n  //New Board\n  const [player, setPlayer] = useState(new Board(NUM_GRIDS));\n\n  //Drag Default => Stops Propagation and Prevents Defaults\n  function dragDefault(e: React.DragEvent<HTMLDivElement>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  //Changes Orientation of Ships on screen\n  function changeOrientation() {\n    const ships = Array.from(\n      document.querySelectorAll(\".ship\")\n    ) as HTMLElement[];\n    const wrapper = document.getElementsByClassName(\"ships\")[0] as HTMLElement;\n    wrapper.style.flexDirection = isHorizontal ? \"row\" : \"column\";\n    ships.forEach((el) => {\n      const computedStyle = window.getComputedStyle(el);\n      const height = computedStyle.width,\n        width = computedStyle.height;\n      el.style.height = height;\n      el.style.width = width;\n    });\n    setIsHorizontal(!isHorizontal);\n  }\n\n  //Starts Drag Function\n  function dragStart(e: React.DragEvent<HTMLDivElement>) {\n    e.dataTransfer.setData(\"text/plain\", e.currentTarget.id);\n    e.currentTarget.style.backgroundColor = \"yellow\";\n    size = +e.currentTarget.className[e.currentTarget.className.length - 1];\n    didValidDrop = false;\n  }\n\n  //Name Object\n  const names = [\n    { size: 5, name: \"Carrier\", selected: false },\n    { size: 4, name: \"Battleship\", selected: false },\n    { size: 3, name: \"Destroyer\", selected: false },\n    { size: 3, name: \"Submarine\", selected: false },\n    { size: 2, name: \"Patrol Boat\", selected: false },\n  ];\n\n  //Get Name Function\n  function getName(): string {\n    return names.filter((el) => !el.selected && el.size === size)[0].name;\n  }\n\n  //On Drag Event Handler\n  function onDrop(e: React.DragEvent<HTMLDivElement>) {\n    didValidDrop = true;\n    const { id } = e.currentTarget;\n    let [x, y] = id.split(\"-\").map((el) => +el);\n    const newPlayer = new Board(NUM_GRIDS, player);\n\n    //Set on Board\n    success = \n    isHorizontal\n      ? newPlayer.insertShipHorizontal(getName(), x, y, size)\n      : newPlayer.insertShipVertical(getName(), x, y, size);\n    if(!success)return;\n\n    setPlayer(newPlayer);\n    \n    for (let i = 0; i < size; ++i) {\n      //Set on Screen\n      document.getElementById(`${x}-${y}`)!.style.background = \"salmon\";\n      if (!isHorizontal) x = (x + 1) % NUM_GRIDS;\n      else y = (y + 1) % NUM_GRIDS;\n    }\n    setCounter(counter + 1);\n    dragDefault(e);\n  }\n  \n  //End Drag Event Handler\n  function dragEnd(e: React.DragEvent<HTMLDivElement>) {\n    if (!didValidDrop || !success) e.currentTarget.style.display = \"none\";\n    else e.currentTarget.style.background = \"pink\";\n    if(counter === 5) update(player);\n  }\n  \n  //JSX Return Element\n  return (\n    <div>\n      <div className=\"GameBoard flex-center\">\n        <h2>Place your Battle Ships</h2>\n        <div className=\"grids\">{Squares.map((el) => el)}</div>\n      </div>\n      <div className=\"ship-wrapper\">\n        <h2>Drag n' Drop your Ships</h2>\n        <button onClick={changeOrientation}>Change Orientation</button>\n        <div className=\"ships\">\n          <div\n            className=\"ship ship-5\"\n            onDragStart={dragStart}\n            onDrop={onDrop}\n            onDragEnd={dragEnd}\n            draggable={true}\n          ></div>\n          <div\n            className=\"ship ship-4\"\n            onDragStart={dragStart}\n            onDrop={onDrop}\n            onDragEnd={dragEnd}\n            draggable={true}\n          ></div>\n          <div\n            className=\"ship ship-3\"\n            onDragStart={dragStart}\n            onDrop={onDrop}\n            onDragEnd={dragEnd}\n            draggable={true}\n          ></div>\n          <div\n            className=\"ship ship-3\"\n            onDragStart={dragStart}\n            onDrop={onDrop}\n            onDragEnd={dragEnd}\n            draggable={true}\n          ></div>\n          <div\n            className=\"ship ship-2\"\n            onDragStart={dragStart}\n            onDrop={onDrop}\n            onDragEnd={dragEnd}\n            draggable={true}\n          ></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SelectBoard;\n","import React from \"react\";\nimport { GameBoard } from \"./Components/GameBoard\";\nimport SelectBoard from \"./Components/SelectBoard\";\nimport { Board } from \"./Logic/Game\";\n\nexport function getRandomIndex(len: number) {\n  return Math.round(Math.random() * (len - 1));\n}\n\nconst NUM_BOARD = 10;\n\ninterface props {}\n\ninterface state {\n  choose: boolean;\n  player: Board;\n  computer: Board;\n  hasWon: boolean;\n  winner: 'You' | 'Computer' | undefined;\n}\n\nclass App extends React.Component<props, state> {\n  state = {\n    choose: true,\n    player: new Board(NUM_BOARD),\n    computer: new Board(NUM_BOARD),\n    hasWon: false,\n    winner: undefined\n  };\n\n  updatePlayerBoard = (val: Board) => {\n    this.setState({ player: val });\n  };\n\n  generateRandomGame = () => {\n    const ships = [\n      { size: 5, name: \"Carrier\", selected: false },\n      { size: 4, name: \"Battleship\", selected: false },\n      { size: 3, name: \"Destroyer\", selected: false },\n      { size: 3, name: \"Submarine\", selected: false },\n      { size: 2, name: \"Patrol Boat\", selected: false },\n    ];\n    const orientation = [true, false];\n    const board = new Board(NUM_BOARD);\n    let indx = 0;\n\n    while (!ships.every((ship) => ship.selected)) {\n      const x = getRandomIndex(NUM_BOARD);\n      const y = getRandomIndex(NUM_BOARD);\n      const isVert = orientation[getRandomIndex(2)];\n\n      const verdict = isVert\n        ? board.insertShipVertical(ships[indx].name, x, y, ships[indx].size)\n        : board.insertShipHorizontal(ships[indx].name, x, y, ships[indx].size);\n      if (verdict) ships[indx++].selected = true;\n    }\n\n    this.setState({ computer: board });\n  };\n\n  hit = (didHit: boolean, el: HTMLElement): void => {\n    const color = didHit ? \"#f00\" : \"#fff\";\n    const circle = document.createElement(\"div\");\n    circle.classList.add(\"target\");\n    circle.style.background = color;\n    el.appendChild(circle);\n  };\n\n  computerPlay = () => {\n    if (this.state.hasWon) return;\n    document.querySelector(\"h2.computer\")?.classList.add(\"green\");\n    document.querySelector(\"h2.player\")?.classList.remove(\"green\");\n    const { player } = this.state;\n    let x = 0,\n      y = 0;\n    while (player.BoardArray[x][y].wasHit) {\n      x = getRandomIndex(NUM_BOARD);\n      y = getRandomIndex(NUM_BOARD);\n    }\n    const newBoard = new Board(NUM_BOARD, player);\n    const didHit = newBoard.hit(x, y);\n    const el = document.getElementById(`player-${x}-${y}`) as HTMLElement;\n    this.hit(didHit, el);\n    this.setState({ player: newBoard });\n    this.setState({ hasWon: newBoard.isGameOver() });\n    if(this.state.hasWon) this.setState({winner: 'Computer'});\n  };\n  \n  handlePlay = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (this.state.hasWon) return;\n    document.querySelector(\"h2.player\")?.classList.add(\"green\");\n    document.querySelector(\"h2.computer\")?.classList.remove(\"green\");\n    const id = e.currentTarget.id;\n    const [, x, y] = id.split(\"-\");\n    const newBoard = new Board(NUM_BOARD, this.state.computer);\n    if (newBoard.BoardArray[x][y].wasHit) return;\n    const didHit = newBoard.hit(+x, +y);\n    this.hit(didHit, e.currentTarget);\n    this.setState({ computer: newBoard });\n    this.setState({ hasWon: newBoard.isGameOver() });\n    if(this.state.hasWon) this.setState({winner: 'You'});\n    setTimeout(this.computerPlay, 500);\n  };\n\n  render = () => {\n    const { choose, hasWon, player, winner } = this.state;\n\n    if (!choose) {\n      const playerBoard = document.querySelector('.grids') as HTMLDivElement;\n      if(playerBoard)\n      for (let i = 0; i < NUM_BOARD; i++) {\n        for (let j = 0; j < NUM_BOARD; j++) {\n          if (player.BoardArray[i][j].hasShip){\n            const square = playerBoard.querySelector(`#player-${i}-${j}`) as HTMLDivElement;\n            if(square)square.style.background = \"salmon\";\n          }\n        }\n      }\n    }\n\n    if(hasWon){\n      document.querySelector('.winner')?.classList.add('show-winner');\n    }\n    return (\n      <div className=\"App flex-center\">\n        <div className=\"winner flex-center\"> {winner} Won! </div>\n        {choose ? (\n          <SelectBoard update={this.updatePlayerBoard} />\n        ) : (\n          <div className=\"flex-center\">\n            <GameBoard name=\"Player\" clickable={false} />\n            <GameBoard\n              name=\"Computer\"\n              clickable={true}\n              clickHandler={this.handlePlay}\n            />\n          </div>\n        )}\n        <button\n          onClick={() => {\n            this.setState({ choose: !choose });\n            this.generateRandomGame();\n          }}\n        >\n          {choose ? \"Let's Go\" : \"Restart\"}\n        </button>\n      </div>\n    );\n  };\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './Style/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}